// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  name         String
  lastName     String
  password     String
  opinions     Opinion[]
  deleted      Boolean       @default(false)
  reservations Reservation[]
}

model Reservation {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  movieId          String
  title            String
  date             String
  price            Float
  watched          Boolean        @default(false)
  seatNumber       Int[]
  movieScreeningId String
  movieScreening   MovieScreening @relation(fields: [movieScreeningId], references: [id])
}

model Opinion {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  movieTitle  String
  description String
  rate        Int
  deleted     Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id])
  userId      String? @db.ObjectId
  movieId     String? @db.ObjectId
  movie       Movie?  @relation(fields: [movieId], references: [id])
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  lastName String
  password String
  email    String
}

model CinemaAdmin {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  lastName        String
  cinemaName      String
  password        String
  deleted         Boolean          @default(false)
  movies          Movie[]
  moviesScreening MovieScreening[]
}

model Movie {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  images         String[]
  opinion        Opinion[]
  premiere       String
  end            String
  deleted        Boolean          @default(false)
  cinemaAdmin    CinemaAdmin?     @relation(fields: [cinemaAdminId], references: [id])
  cinemaAdminId  String?          @db.ObjectId
  MovieScreening MovieScreening[]
}

model MovieScreening {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  movie         Movie         @relation(fields: [movieId], references: [id])
  reservations  Int[]
  price         Float
  date          String
  end           Boolean
  CinemaAdmin   CinemaAdmin?  @relation(fields: [cinemaAdminId], references: [id])
  cinemaAdminId String?       @db.ObjectId
  Reservation   Reservation[]
  movieId       String        @db.ObjectId
}
